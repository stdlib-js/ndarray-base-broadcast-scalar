{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isAccessorArray from '@stdlib/array-base-assert-is-accessor-array';\nimport isComplexDataType from '@stdlib/array-base-assert-is-complex-floating-point-data-type';\nimport accessorSetter from '@stdlib/array-base-accessor-setter';\nimport setter from '@stdlib/array-base-setter';\nimport zeros from '@stdlib/array-base-zeros';\nimport buffer from '@stdlib/ndarray-base-buffer';\nimport ndarray from '@stdlib/ndarray-base-ctor';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Broadcasts a scalar value to an ndarray having a specified shape.\n*\n* @param {*} value - scalar value\n* @param {string} dtype - output array data type\n* @param {NonNegativeIntegerArray} shape - output array shape\n* @param {string} order - memory layout (either row-major or column-major)\n* @throws {TypeError} second argument must be a recognized data type\n* @returns {ndarray} ndarray\n*\n* @example\n* var x = broadcastScalar( 1.0, 'float64', [ 2, 2 ], 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 2, 2 ]\n*\n* var dt = x.dtype;\n* // returns 'float64'\n*\n* var v = x.get( 0, 1 );\n* // returns 1.0\n*/\nfunction broadcastScalar( value, dtype, shape, order ) {\n\tvar buf;\n\tvar set;\n\tvar N;\n\n\tbuf = buffer( dtype, 1 );\n\tif ( buf === null ) {\n\t\tthrow new TypeError( format( '1d337', dtype ) );\n\t}\n\tif ( isComplexDataType( dtype ) && isNumber( value ) ) {\n\t\tvalue = [ value, 0.0 ]; // note: we're assuming that the ComplexXXArray setter accepts an array of interleaved real and imaginary components\n\t}\n\tif ( isAccessorArray( buf ) ) {\n\t\tset = accessorSetter( dtype );\n\t} else {\n\t\tset = setter( dtype );\n\t}\n\tset( buf, 0, value );\n\tN = shape.length || 1;\n\treturn new ndarray( dtype, buf, shape, zeros( N ), 0, order );\n}\n\n\n// EXPORTS //\n\nexport default broadcastScalar;\n"],"names":["broadcastScalar","value","dtype","shape","order","buf","N","buffer","TypeError","format","isComplexDataType","isNumber","isAccessorArray","accessorSetter","setter","length","ndarray","zeros"],"mappings":";;+4BA0DA,SAASA,EAAiBC,EAAOC,EAAOC,EAAOC,GAC9C,IAAIC,EAEAC,EAGJ,GAAa,QADbD,EAAME,EAAQL,EAAO,IAEpB,MAAM,IAAIM,UAAWC,EAAQ,QAASP,IAYvC,OAVKQ,EAAmBR,IAAWS,EAAUV,KAC5CA,EAAQ,CAAEA,EAAO,KAEbW,EAAiBP,GACfQ,EAAgBX,GAEhBY,EAAQZ,IAEVG,EAAK,EAAGJ,GACbK,EAAIH,EAAMY,QAAU,EACb,IAAIC,EAASd,EAAOG,EAAKF,EAAOc,EAAOX,GAAK,EAAGF,EACvD"}